#!assert
#!board=boards/empty.gbb

procedure t.LlenarTablero() {
	foreach c in [minColor()..maxColor()] {
		t.LlenarFilaConBolitas(c, 2)		
	}
}

// Este va sin cons y snoc
function filaALista(tp) {
	t := tp
	res := []
	t.IrAlBorde(Oeste)
	while (puedeMover(t, Este)) {
		res := res ++ [nroTotalBolitas(t)]
		t.Mover(Este)
	}
	return(res ++ [nroTotalBolitas(t)])
}

// Este va con Snoc y Cons, definidos en Biblioteca.gbs
function sumarElementos(xs) {
	suma := 0
	foreach x in xs {
		suma := suma + x
	}
	return(suma)
}

function manyBool(n) {
	bools := []
	bool := True
	repeat (n) {
		bools := bools ++ [bool]
		bool := not bool
	}
	return(bools)
}

function countTrue(bs) {
	c := 0
	foreach b in bs {
		if (b) {
			c := c +1
		}
	}
	return(c)
}

t.program {
	passed := True
	t.VaciarTablero()
	t.LlenarTablero()
	
	cantidadesFila := filaALista(t)
	
	anchoTablero := medirTablero(t, ancho())
	passed.Assert(sumarElementos(cantidadesFila) == 2 * 4 * anchoTablero)
	
	foreach i in [] {}
	
	passed := passed && countTrue(manyBool(20)) == 10
	
	return(passed)
}
