#########################
# Coordenada			#
#########################

type Coordenada is record {
	field columna
	field fila
}

function eqCoordenada(c1, c2) {
	return(fila(c1) == fila(c2) && columna(c1) == columna(c2))
}

#########################
# Lists					#
#########################

function eqLists(xs, ys) {
	ys_rec := ys
	xs_rec := xs
	equal := True
	while (not isEmpty(xs_rec) && not isEmpty(ys_rec)) {
		 equal := equal && (head(xs_rec) == head(ys_rec))
		xs_rec := tail(xs_rec)
		ys_rec := tail(ys_rec)
	}
	 equal := equal && (isEmpty(xs_rec))
	 equal := equal && (isEmpty(ys_rec))
	return(equal)
}

#########################
# Tablero				#
#########################

# Dimension
type Dimension is record {
	field filas
	field columnas
}

function dimensionTablero() {
	return(Dimension(columnas <- medirTablero(ancho()), filas <- medirTablero(alto())))
}

# Posicion

function posicionActual() {
	return(Coordenada(fila <- medirHacia(Sur)-1, columna <- medirHacia(Oeste)-1))
}

###

function rangeS(min, max, step) {
	return([min, min + step..max])
}

function nroTotalBolitas() {
	total := 0
	foreach c in [minColor()..maxColor()] {
		total := total + nroBolitas(c)
	}
	return(total)
}

procedure IrAlOrigen() {
	IrAlBorde(Sur)
	IrAlBorde(Oeste)
}

procedure IrAlFin() {
    while (puedeMover(Este) || puedeMover(Norte)) {
        if (puedeMover(Este)) {
            Mover(Este)
        } else {
            Mover(Norte)
            IrAlBorde(Oeste)
        }
    }
}

procedure MoverN(unaDireccion, unaCantidad) {
    repeat (unaCantidad) { 
        Mover(unaDireccion)
    }
}

function puedeMoverN(unaDireccion, unaCantidad) {
    pasos := 0;
    while (puedeMover(unaDireccion) && pasos < unaCantidad) {
        Mover(unaDireccion)
        pasos := pasos + 1;
    }
    return(pasos == unaCantidad)
}

function medirHacia(unaDireccion) {
	count := 1
	while (puedeMover(unaDireccion)) {			
		Mover(unaDireccion)
		count := count + 1
	}
	return(count)
}

function medirTablero(unaDireccion) {
	IrAlBorde(opuesto(unaDireccion))
	return(medirHacia(unaDireccion))
}

function ancho() {
	return(Este)
}

function alto() {
	return(Norte)
}

function puedeMoverTablero() {
	return(puedeMover(Norte) || puedeMover(Este))
}

procedure MoverTablero() {
	if (puedeMover(Norte)) {
		Mover(Norte)
	} else {
		IrAlBorde(Sur)
		Mover(Este)
	}
}

procedure ReemplazarColor(unColor, otroColor) {
	PonerN(otroColor, nroBolitas(unColor))
	SacarTodas(unColor)
}

procedure SacarTodas(unColor) {
	SacarN(unColor, nroBolitas(unColor))
}

procedure ReemplazarColorEnTablero(unColor, otroColor) {
	IrAlOrigen()
	while (puedeMoverTablero()) {
		ReemplazarColor(unColor, otroColor)
		MoverTablero()
	}
	ReemplazarColor(unColor, otroColor)
}

procedure PonerN(unColor, cantidad) {
	repeat (cantidad) {
		Poner(unColor)
	}
}

procedure SacarN(unColor, cantidad) {
	repeat (cantidad) {
		Sacar(unColor)
	}
}

procedure LlenarFilaConBolitas(unColor, cantidad) {
	IrAlBorde(Oeste)
	while (puedeMover(Este)) {
		PonerN(unColor, cantidad)
		Mover(Este)
	}
	PonerN(unColor, cantidad)
}

function snoc(xs, x) { return(xs ++ [x])}
function cons(x, xs) { return([x] ++ xs)}

procedure LlenarConBolitas(unColor, cantidad) {
	IrAlOrigen()
	while (puedeMoverTablero()) {
		PonerN(unColor, cantidad)
		MoverTablero()
	}
	PonerN(unColor, cantidad)
}

procedure SacarTodasTablero(unColor) {
	IrAlOrigen()
	while(puedeMoverTablero()) {
		SacarTodas(unColor)
		MoverTablero()
	}
  SacarTodas(unColor)
}

function contarBolitas(unColor) {
	count := 0	
	IrAlOrigen()
	while (puedeMoverTablero()) {
		count := count + nroBolitas(unColor)
		MoverTablero()
	}
	return(count + nroBolitas(unColor))
}

function contarTotalBolitas() {
	count := 0
	foreach c in [minColor()..maxColor()] {
		count := count + contarBolitas(c)
	}
	return(count)
}

function aplicarNumOps(n, m) {
	return ((n + m) + (n*m) + (n div m) + (n mod m))
}

function aplicarLogOps(p, q) {
	res := (p && q)
	res := (p || q)
	res := not p 
	return(not q || res)
}
