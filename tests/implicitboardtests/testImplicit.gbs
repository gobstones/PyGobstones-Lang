#!assert
#!board=boards/empty.gbb

"""
	Implementación de la práctica 8 completa de Introducción a la Programación. Con tablero implicito.
	Año 2013, Segundo semestre
	https://sites.google.com/site/inpr2013s2/repositorio
"""

# Ejercicio 1

type Coord is record {
    field fila
    field columna
}

function filaCoord(c) {
    return(fila(c))
}

function columnaCoord(c) {
    return(columna(c))
}

function eqCoord(c1, c2) {
    return(filaCoord(c1) == filaCoord(c2) && 
           columnaCoord(c1) == columnaCoord(c2))
}

function gtCoord(c1, c2) {
    return((filaCoord(c1) > filaCoord(c2) && columnaCoord(c1) > columnaCoord(c2)) ||
           (filaCoord(c1) >= filaCoord(c2)))
}

function mkCoord(fil, col) {
    return(Coord(fila <- fil, columna <- col))
}

function mkOrigen() {
    return(mkCoord(0,0))
}

function mkUltima() {
    return(mkCoord(medirTablero(alto()) -1, medirTablero(ancho()) -1))
}

procedure IrACoord(c) {
    IrAlOrigen()
    MoverN(Norte, filaCoord(c))
    MoverN(Este, columnaCoord(c))
}

function coordActual() {
    return(mkCoord(medirHacia(Sur)-1, medirHacia(Oeste) -1))
}

function reflejo(c) {
    return(mkCoord(columnaCoord(c), filaCoord(c)))
}

function sobreLaDiagonal(c) {
    return(filaCoord(c) > columnaCoord(c))
}

function enDiagonal(c) {
    return(filaCoord(c) == columnaCoord(c))
}

function puedeMoverT(d1, d2) {
    return(puedeMover(d1) || puedeMover(d2))
}

function testEjercicio1() {
    passed := True
    IrACoord(mkOrigen())
    passed := passed && not(puedeMover(Sur) || puedeMover(Oeste))
    Mover(Este)
    IrACoord(reflejo(coordActual()))
    passed := passed && not(puedeMover(Oeste))
    IrACoord(mkUltima())
    passed := passed && not(puedeMoverT(Norte, Este))
    Mover(Sur)    
    passed := passed && (gtCoord(mkUltima(), coordActual()) && 
                  gtCoord(coordActual(), mkOrigen()))
    IrAlBorde(Oeste)
    
    passed := passed && (sobreLaDiagonal(coordActual()))    
    passed := passed && not(sobreLaDiagonal(reflejo(coordActual())))
    return(passed)
}

# Ejercicio 2

type Cell is record {
    field nAzul
    field nNegro
    field nRojo
    field nVerde
}

function mkCelda(azules, negros, rojos, verdes) {
    return(Cell(nAzul <- azules, 
                 nNegro <- negros,
                 nRojo <- rojos,
                 nVerde <- verdes))
}

function mkCeldaActual() {
    return(mkCelda(nroBolitas(Azul),
                   nroBolitas(Negro),
                   nroBolitas(Rojo),
                   nroBolitas(Verde)))
}

function mkCeldaEnCoord(crd) {
    IrACoord(crd)
    return(mkCeldaActual())
}

procedure VolcarCelda(celda) {
    PonerN(Azul, nAzul(celda))
    PonerN(Negro, nNegro(celda))
    PonerN(Rojo, nRojo(celda))
    PonerN(Verde, nVerde(celda))
}

procedure IntercambiarCelda(crd1, crd2) {
    crdActual := coordActual()
    celdaCrd1 := mkCeldaEnCoord(crd1)
    IrACoord(crd1)
    VaciarCelda()
    VolcarCelda(mkCeldaEnCoord(crd2))
    IrACoord(crd2)
    VaciarCelda()
    VolcarCelda(celdaCrd1)
    IrACoord(crdActual)
}

procedure ReflejarCelda(crd) {    
    IntercambiarCelda(crd, reflejo(crd))
}

procedure MoverT(dir1, dir2) {
    if (puedeMover(dir1)) {
        Mover(dir1)
    } else {
        IrAlBorde(opuesto(dir1))
        Mover(dir2)
    }    
}

procedure ReflejarTablero() {
    IrAlOrigen()
    while (puedeMoverT(Este, Norte)) {
        crdAct := coordActual()
        if (sobreLaDiagonal(crdAct)) {
            ReflejarCelda(crdAct)
        }
        
        MoverT(Este, Norte)
    }    
}

function celdaEqActual(celda) {    
    return(eqCelda(mkCeldaActual(), celda))
}

function eqCelda(celda1, celda2) {
    return(nAzul(celda1) == nAzul(celda2) &&
           nNegro(celda1) == nNegro(celda2) &&
           nRojo(celda1) == nRojo(celda2) &&
           nVerde(celda1) == nVerde(celda2))
}

procedure VaciarCelda() {
    SacarTodas(Azul)
    SacarTodas(Negro)
    SacarTodas(Rojo)
    SacarTodas(Verde)
}

procedure MoverDiagonal(d1, d2) {
    Mover(d1)
    Mover(d2)
}


function testEjercicio2() {
    passed := True
    
    celda := mkCeldaActual()
    passed := passed && (celdaEqActual(celda))
    
    VaciarCelda()
    VolcarCelda(celda)
    passed := passed && (celdaEqActual(celda))
    
    IrACoord(mkCoord(0,1))
    celda := mkCeldaActual()
    ReflejarCelda(coordActual())    
    IrACoord(reflejo(coordActual()))       
    passed := passed && (celdaEqActual(celda))
        
    return(passed)
}

# Test program

program {    
    passed := True
	passed := passed && (testEjercicio1())
    passed := passed && (testEjercicio2())
	return(passed)
}
