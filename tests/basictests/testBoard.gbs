#!assert
#!board=boards/empty_small.gbb

# Test 0
function test0(tablero) {
	t:= tablero

	t.RecDepth3()
	t.IrAlBorde(Norte)
	t.RecDepth3()

	return(True)
}

procedure t.RecDepth2() {
	t.RecDepth1()
}

procedure t.RecDepth1() {
	t.Poner(Verde)
}

procedure t.RecDepth3() {
	t.RecDepth2()
}


# Test 1
function test1(tablero) {
	t := tablero
	passed := True

	anchoTablero := medirTablero(t, ancho())
	altoTablero := medirTablero(t, alto())
	t.LlenarConBolitas(Verde, 2)
	cuenta := contarBolitas(t, Verde)

	passed.AssertEqual(cuenta, anchoTablero * altoTablero * 2, "The count of stones should be equal to width*height*2")
	return(passed)
}

# Test 2
function test2(tablero) {
	t := tablero
	passed := True

	i := 1
	foreach c in [minColor()..maxColor()] {
		t.LlenarConBolitas(Verde, 2 * i)
		i := i + 1
	}

	foreach c in [Rojo, Azul, Negro] {
		t.ReemplazarColorEnTablero(c, Verde)
	}

	foreach c in [Rojo, Azul, Negro] {
		passed.AssertEqual(contarBolitas(t, c), 0, "There should be no stones")
	}

	cantVerdes := contarBolitas(t, Verde)
	anchoTablero := medirTablero(t, ancho())
	altoTablero := medirTablero(t, alto())
	cantEsperada := anchoTablero * altoTablero  * 20

	passed.AssertEqual(cantVerdes, cantEsperada, "Green stones count should match")
	return(passed)
}

function testDimensiones(t) {
	dim := dimensionTablero(t)
	return(filas(dim) == columnas(dim) && filas(dim) == 4)
}

# Main
t.program {
	passed := test0(t)
	passed.Assert(test1(t), "test1")
	passed.Assert(test2(t), "test2")
	passed.Assert(testDimensiones(t), "testDimensiones")
	return(passed)
}
