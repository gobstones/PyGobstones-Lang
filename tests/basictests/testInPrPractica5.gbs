#!assert
#!board=boards/empty.gbb

"""
	Implementación de la práctica 5 completa de Introducción a la Programación.
	Año 2013, Segundo semestre
	https://sites.google.com/site/inpr2013s2/repositorio
"""

# Ejercicio 1

function testEjercicio1(tablero) {
	t := tablero
	
	crd := posicionActual(t)
	dim := dimensionTablero(t)
	
	pasosFila := 37
	pasosColumna := 21
	
	t.MoverNRotativo(pasosColumna, Este)
	t.MoverNRotativo(pasosFila, Norte)
	
	crdEsperada := Coordenada(fila <- (pasosFila + crd.fila) mod dim.filas, 
							  columna <- (pasosColumna + crd.columna) mod dim.columnas)
	crd := posicionActual(t)

	return(eqCoordenada(crd, crdEsperada))
}

procedure t.MoverNRotativo(n, d) {
	repeat (n) {
		if (not puedeMover(t, d)) {
			t.IrAlBorde(opuesto(d))
		} else {
			t.Mover(d)
		}
	}
}

# Ejercicio 2

function testEjercicio2(tablero) {
    t := tablero    
    t.IrAlOrigen()
    celdas := medirTablero(t, Este)    
    t.VaciarTablero()
    t.PonerSalteado(3, Rojo, Este)
    nBolitas := contarBolitas(t, Rojo)
    nBolitasEsperadas := celdas div 3
    return(nBolitasEsperadas == nBolitas)
}

procedure t.PonerSalteado(n, c, d) {
    t.Poner(c)
    while (puedeMoverN(t, d, n)) {
        t.MoverN(d, n)
        t.Poner(c)
    }
}


# Ejercicio 3

procedure t.IrAlInicio'(d1, d2) {
    # d1 y d2 es la dirección hacia la cual se realiza
    # el recorrido. El inicio es la esquina opuesta al
    # desplazamiento.
    t.IrAlBorde(opuesto(d1))
    t.IrAlBorde(opuesto(d2))
}

function puedeMoverT(t, d1, d2) {
    return(puedeMover(t, d1) || puedeMover(t, d2))
}

procedure t.MoverT(d1, d2) {
    if (puedeMover(t, d1)) {
        t.Mover(d1)
    } else {
        t.IrAlBorde(opuesto(d1))
        t.Mover(d2)
    }
}

function testEjercicio3Dir(tablero, d) {
    t := tablero
    passed := True
    t.IrAlInicio'(d, siguiente(d))    
    passed.Deny(puedeMoverT(t, opuesto(d), opuesto(siguiente(d))))
    while (puedeMover(t, d)) {
        t.MoverT(d, siguiente(d))
    }
    passed.Assert(puedeMoverT(t, d, siguiente(d)))    
    t.MoverT(d, siguiente(d))
    passed.Deny(puedeMover(t, opuesto(d)))
    passed.Assert(puedeMover(t, opuesto(siguiente(d))))
    return(passed)
}

function testEjercicio3(t) {
    passed := True
    foreach d in [minDir()..maxDir()] {
        passed.Assert(testEjercicio3Dir(t, d))
    } 
    return(passed)
}

t.program {    
    passed := True
	passed.Assert(testEjercicio1(t))
    passed.Assert(testEjercicio2(t))
    passed.Assert(testEjercicio3(t))
	return(passed)
}
