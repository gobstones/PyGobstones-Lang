#!assert
#!board=boards/empty.gbb

procedure t.LlenarTablero() {
	foreach c in [minColor()..maxColor()] {
		t.LlenarFilaConBolitas(c, 2)		
	}
}


function naturales(n) {
	res := []
	foreach ni in [0..n] {
		res := res ++ [ni]
	} 
	return(res)
}

function sumarNForeach(n) {
	suma := 0
	foreach x in naturales(n) {
		suma := suma + x
	}
	return(suma)
}

function sumarNWhile(n) {
	suma := 0
	rec := naturales(n)
	while (not isEmpty(rec)) {
		suma := suma + head(rec)
		rec := tail(rec)
	}
	return(suma)
}

function testSumarForeachWhile() {
	passed := True
	foreach n in [22, 11, 7] {
		passed.Assert(sumarNForeach(n) == sumarNWhile(n))
	}	
	return(passed)
}

function testOpsSobreLista() {
	suma := 0
	rec := naturales(20)
	while (not isEmpty(rec)) {
		suma := suma + aplicarNumOps(head(rec), 4)
		rec := tail(rec)
	}
	return(suma)
}
 
function testGeneratorRepeat(n) {
	rpns := []
	count := 1
	repeat (n) { 
		rpns := rpns ++ [count]
		count := count + 1
	}
	
	return(eqLists(rpns, [1,1..n])) 
}
 
t.program {
	passed := testSumarForeachWhile()
	result := testOpsSobreLista()
	return(passed, result)
}
